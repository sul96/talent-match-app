# -*- coding: utf-8 -*-
"""Untitled38.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I2172oEQtnO3EsTvdTYm0psVLaAJpIsE
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from google import genai
from google.genai.errors import APIError
import io
import random

# --- 0. Konfigurasi Dasar Streamlit ---
st.set_page_config(
    page_title="AI Talent Match Intelligence",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.title("üß† AI Talent Match Intelligence: Dashboard")

# --- 1. Setup API dan Caching ---

# Pastikan kunci API diatur di Streamlit Secrets atau environment variable
GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    st.error("üö® GEMINI_API_KEY belum diatur. Harap tambahkan di Streamlit Secrets atau Environment Variable.")
    st.stop()

# Inisialisasi Klien Gemini
@st.cache_resource
def get_gemini_client(api_key):
    """Menginisialisasi klien Gemini dan melakukan caching."""
    try:
        client = genai.Client(api_key=api_key)
        return client
    except Exception as e:
        st.error(f"Gagal inisialisasi Gemini Client: {e}")
        return None

client = get_gemini_client(GEMINI_API_KEY)
if not client:
    st.stop()


# --- 2. Fungsi Data Loading & Caching ---

@st.cache_data
def load_data(uploaded_file):
    """Memuat data dari file Excel yang diunggah atau menggunakan data dummy jika gagal."""

    # ASUMSI NAMA KOLOM yang wajib ada (sesuai logika sebelumnya):
    REQUIRED_COLS = {
        'employee_id', 'fullname', 'role', 'grade',
        'tgv_name', 'tgv_match_score', 'final_match_rate', 'directorate'
    }

    try:
        df = pd.read_excel(uploaded_file)

        # Penyesuaian/Pemetaan nama kolom (jika diperlukan)
        # Ganti baris ini jika nama kolom Anda berbeda dengan asumsi kode
        df = df.rename(columns={
            'position_name': 'role',
            'grade_name': 'grade',
            # ... tambahkan pemetaan lain jika perlu
        })

        # Validasi kolom kunci
        missing_cols = REQUIRED_COLS - set(df.columns)
        if missing_cols:
            st.warning(f"Kolom yang diperlukan tidak ditemukan: {missing_cols}. Menggunakan Data Dummy.")
            raise ValueError("Dataframe tidak lengkap.")

        df['employee_id'] = df['employee_id'].astype(str)
        return df

    except Exception as e:
        st.error(f"Gagal memuat file Excel. Error: {e}")
        st.info("Menggunakan Data Dummy...")

        # Fallback ke Data Dummy
        return pd.DataFrame({
            'employee_id': [f"EMP{i}" for i in range(1001, 1016)],
            'fullname': [f"Kandidat {i}" for i in range(1, 16)],
            'directorate': random.choices(['Technology', 'Commercial'], k=15),
            'role': random.choices(['Data Analyst', 'Marketing Manager', 'HRBP'], k=15),
            'grade': random.choices(['III', 'IV', 'V'], k=15),
            'tgv_name': random.choices(['Drive & Achievement', 'Leadership & Influence', 'Cognitive Strategy', 'Core Competencies'], k=15),
            'tgv_match_score': [random.uniform(75, 99) for _ in range(15)],
            'final_match_rate': [random.uniform(60, 95) for _ in range(15)]
        })


# --- 3. Fungsi Logika (Gemini & Data) ---

def call_gemini_api(role, purpose, level, client):
    """Memanggil Gemini API untuk menghasilkan Job Profile."""
    prompt_content = f"""
    Anda adalah HR Specialist di perusahaan teknologi. Tulis Job Description (JD), daftar 4-5 Key Competencies, dan 3 Kualifikasi minimum
    untuk peran '{role}' pada Job Level '{level}'.
    Tujuan inti peran (Core Purpose) adalah: '{purpose}'.
    Tampilkan output Anda secara profesional dalam format Markdown, gunakan heading dan bullet points.
    """

    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt_content,
            config={"temperature": 0.7}
        )
        return response.text

    except APIError as e:
        return f"üö® **API Error (Gemini)**: Gagal terhubung. Cek Kunci API. Detail: {e}"
    except Exception as e:
        return f"üö® **Error Umum**: {e}"


def get_ranked_results(benchmark_ids, df):
    """Filter data untuk Success Formula dan Ranking."""

    # Memastikan df tidak kosong sebelum filtering
    if df.empty:
        return pd.DataFrame(), pd.DataFrame(), 0

    bench_data = df[df['employee_id'].astype(str).isin(map(str, benchmark_ids))]

    bench_count = len(bench_data['employee_id'].unique())

    # 1. Success Formula (Rata-rata Score TGV)
    if not bench_data.empty:
        formula_df = bench_data.groupby('tgv_name')['tgv_match_score'].mean().reset_index()
        formula_df = formula_df.rename(columns={'tgv_match_score': 'Avg_Score'})
        formula_df['Avg_Score'] = formula_df['Avg_Score'].round(1)
    else:
        formula_df = pd.DataFrame() # Dataframe kosong jika tidak ada benchmark

    # 2. Ranked Talent List (Berdasarkan final_match_rate)
    ranked_df = df.sort_values(by='final_match_rate', ascending=False).drop_duplicates(subset=['employee_id'])

    return formula_df, ranked_df, bench_count


# --- 4. Sidebar: Upload Data & Input Kunci ---

# File Uploader
uploaded_file = st.sidebar.file_uploader(
    "1. Upload Data Excel",
    type=['xlsx'],
    help="Unggah file hasil_talent_benchmark1.xlsx Anda."
)

df_detail = pd.DataFrame()
if uploaded_file is not None:
    df_detail = load_data(uploaded_file)
    st.sidebar.success("Data berhasil dimuat!")
else:
    st.sidebar.info("Silakan unggah file atau gunakan Data Dummy.")
    df_detail = load_data(None) # Load dummy data jika tidak ada upload


# --- 5. Main UI & Logika Aplikasi ---

if not df_detail.empty:

    # Pilihan Dropdown diambil dari data yang dimuat
    role_choices = df_detail['role'].unique().tolist()
    grade_choices = df_detail['grade'].unique().tolist()
    employee_ids = df_detail['employee_id'].unique().tolist()

    st.sidebar.markdown("---")
    st.sidebar.markdown("### 2. Input Job Profile & Benchmarks")

    # Input Role Information (di Sidebar)
    role_select = st.sidebar.selectbox("Role Name", options=role_choices, index=0)
    level_select = st.sidebar.selectbox("Job Level", options=grade_choices, index=0)
    purpose_text = st.sidebar.text_area(
        "Role Purpose (1-2 kalimat)",
        value='Menganalisis data, memberikan insight strategis, dan membangun model prediksi performa karyawan.',
        height=70
    )

    # Input Benchmark IDs (di Sidebar)
    st.sidebar.markdown("#### Karyawan Benchmark (Maks 3 ID)")
    benchmark_ids = st.sidebar.multiselect(
        "Pilih ID Karyawan Benchmark (Top Performer)",
        options=employee_ids,
        default=employee_ids[:3] if len(employee_ids) >= 3 else employee_ids
    )

    # Tombol Generate (di Sidebar)
    generate_button = st.sidebar.button("üöÄ Generate Job Profile & Score", type="primary")

    # --- Container Utama Dashboard ---
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("üìù Job Profile (AI Generated)")

    with col2:
        st.subheader("üìä Success Formula & Ranking")

    # Logika Saat Tombol Ditekan
    if generate_button:

        # 1. Panggil Gemini API (kolom 1)
        with col1:
            with st.spinner("‚è≥ Sedang membuat Job Profile dengan Gemini..."):
                jd_markdown = call_gemini_api(role_select, purpose_text, level_select, client)
                st.markdown(jd_markdown)

        # 2. Proses Data Ranking & Formula (kolom 2)
        formula_df, ranked_data, bench_count = get_ranked_results(benchmark_ids, df_detail)

        with col2:
            st.markdown(f"**Role:** {role_select} | **Level:** {level_select} | **Benchmarks:** **{bench_count}** ID")
            st.markdown("---")

            # Visualisasi Success Formula (Radar/Bar Plot)
            if not formula_df.empty:
                st.markdown("##### Success Formula (Avg. TGV Score Benchmark)")
                fig, ax = plt.subplots(figsize=(8, 4))
                ax.bar(formula_df['tgv_name'], formula_df['Avg_Score'], color=['#007bff', '#28a745', '#ffc107', '#dc3545'])
                ax.set_ylim(0, 100)
                ax.set_title(f"Avg. TGV Score ({bench_count} Benchmarks)")
                ax.set_ylabel("Avg. Match Score (%)")
                plt.xticks(rotation=45, ha='right')
                st.pyplot(fig)
            else:
                st.warning("‚ö†Ô∏è **Success Formula:** Data benchmark tidak valid/ditemukan.")

        # 3. Tampilkan Ranked List (di bawah kolom)
        st.markdown("---")
        st.subheader(f"Ranked Talent List (Total {len(ranked_data)} Karyawan)")
        if not ranked_data.empty:
            # Tampilkan 10 teratas
            ranked_data_display = ranked_data.copy()
            # Format persentase
            ranked_data_display['Final Match Rate'] = (ranked_data_display['final_match_rate'] / 100).map('{:.1%}'.format)
            st.dataframe(
                ranked_data_display[['employee_id', 'fullname', 'role', 'directorate', 'Final Match Rate']].head(10),
                use_container_width=True
            )
        else:
            st.warning("‚ö†Ô∏è **Ranking:** Data ranking tidak tersedia.")

    else:
        # Tampilan awal sebelum tombol ditekan
        st.info("Masukkan detail Role dan Benchmark Karyawan, lalu klik tombol 'Generate' di sidebar untuk memulai analisis.")

else:
    st.info("Silakan unggah file Excel Anda di sidebar untuk melanjutkan.")